class Queen(RefurbishedRobot):
    def __init__(self, colour):
        RefurbishedRobot.__init__(self)
        self.robot = self.program.robot_dict[self.name]
        self.robot.trace_colour = "white"
        self.style = 5
        self.set_delay(0)
        self.colour = colour
        self.laser_trace()

    def move(self):
        self.set_delay(0.3)
        RefurbishedRobot.move(self)
        self.set_delay(0)
        self.laser_trace()

    def turn_left(self):
        self.set_delay(0.3)
        RefurbishedRobot.turn_left(self)
        self.set_delay(0)
        self.laser_trace()

    def turn_right(self):
        self.set_delay(0.3)
        RefurbishedRobot.turn_right(self)
        self.set_delay(0)
        self.laser_trace()

    def laser_trace(self):
        x, y = self.robot.getPos()
        x1, y1 = x, y
        x2, y2 = x, y
        x3, y3 = x, y
        x4, y4 = x, y
        while x1 > 1 and y1 > 1:
            x1 -= 1
            y1 -= 1
        while x2 < 8 and y2 < 8:
            x2 += 1
            y2 += 1
        while x3 > 1 and y3 < 8:
            x3 -= 1
            y3 += 1
        while x4 < 8 and y4 > 1:
            x4 += 1
            y4 -= 1
        ori = self.robot._getOrientation()
        col = self.colour
        sty = self.style
        self.robot.line_trace = [(x, 1, x, 8, ori, sty, col), (1, y, 8, y, ori, sty, col)]
        self.robot.line_trace.append((x1, y1, x2, y2, ori, sty, col))
        self.robot.line_trace.append((x3, y3, x4, y4, ori, sty, col))
        self.program.wait_update_refresh(self.robot, self.name)

    def go_to(self, x, y):
        for i in range(1, x):
            self.move()
        self.turn_left()
        for i in range(1, y):
            self.move()
        self.turn_right()



''' from wikipedia.org '''
# Return a list of solutions to the ''n''-queens problem on an
# ''n''-by-width board.  A solved board is expressed as a list of
# column positions for queens, indexed by row.  
# Rows and columns are indexed from zero.
def n_queens(n, width):
    if n == 0:
        return [[]] # one solution, the empty list
    else:
        return add_queen(n-1, width, n_queens(n-1, width))
# Try all ways of adding a queen to a column of row new_row, returning
# a list of solutions.  previous_solutions must be a list of new_row-queens
# solutions.

def add_queen(new_row, width, previous_solutions):
    solutions = []
    for sol in previous_solutions:
        # Try to place a queen on each column on row new_row.
        for new_col in range(width):
            # print 'trying', new_col, 'on row', new_row
            if safe_queen(new_row, new_col, sol):
                # No interference, so add this solution to the list.
                solutions.append(sol + [new_col])
    return solutions

# Is it safe to add a queen to sol at (new_row, new_col)?  Return
# true if so.  sol must be a solution to the new_row-queens problem.

def safe_queen(new_row, new_col, sol):
    # Check against each piece on each of the new_row existing rows.
    for row in range(new_row):
        if (sol[row] == new_col or                  # same column clash
            sol[row] + row == new_col + new_row or  # diagonal clash
            sol[row] - row == new_col - new_row):   # other diagonal
            return 0
    return 1



solutions = n_queens(8, 8)
first_solution = solutions[0]

colours = ["red", "blue", "green", "orange", 
           "yellow", "sea green", "grey", "light blue"]
queens = []

for i in range(8):
    queens.append(Queen(colours[i]))
    queens[i].go_to(i+1, first_solution[i]+1)


queens[0].turn_off()

