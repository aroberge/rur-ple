<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<link rel='stylesheet' href=" me ... or <s0>else</s0> ...


While learning how to program may be fun, you should not spend all your time in front of the computer.


<b0>If</b0> it rains, keep reading, otherwise, go outside and play!


(Yes, even you grandpa!)


Making choices


Let me have some fun with the sentence that starts with <b0>if</b0>.


<b0>If</b0> it rains,<br1>


... keep reading,<br2>


<b3>otherwise</b3>,<br4>


... go outside and play!


This is starting to look like a small computer program.


Let me write it as though it were a Python program.


<s0>if</s0> it_rains():


keep_reading()
<s1>else</s1>:


go_outside_and_play()


You just learned a new Python keyword, <s0>else</s0>.


So, if it rains, keep on reading; otherwise, you know what to do!


&quot;I see...&quot;, says Reeborg.


In addition to being able to find out if he is standing next to one or more beepers, Reeborg can see if there is a wall in front of him, blocking his way.


He can also turn his head to his left or his right and see if there is a wall there.


You can ask him to have a look with the following tests:


front_is_clear()  <s0># True if no wall in front, False otherwise</s0>
left_is_clear()
right_is_clear()


Let's use the first one to have Reeborg explore his world.


We will have Reeborg follow the boundary of his world by asking him to move forward, if there is no wall in front of him, and turn left otherwise.


The following simple program is the basis of what is needed:


<s0>if</s0> front_is_clear():


move()
<s1>else</s1>:


turn_left()


turn_off()


Below is the result of running this simple program in two different situations.


If you try it, make sure you don't forget the colon (<t0>:</t0>) after the <s1>else</s1> keyword.


start if


../../images/intro/if1start.png


lead to


../../images/lead_to.png


end if


../../images/intro/if1end.png


start if


../../images/intro/if2start.png


lead to


../../images/lead_to.png


end if


../../images/intro/if2end.png


Now, let's repeat the simple <i0>conditional</i0> instruction many times to have Reeborg go around his world.


<s0>def</s0> move_or_turn():


<s1>if</s1> front_is_clear():


move()


<s2>else</s2>:


turn_left()

repeat(move_or_turn, 20)      
turn_off()


This, on a small world, give the following end result:


around


../../images/intro/around1.png


We can make this more interesting by having Reeborg do a &quot;dance&quot; if he can move forward, and put down a beeper if he has to turn.


The following program has Reeborg do just that, going only partly around his world:


<s0>def</s0> dance():


repeat(turn_left, 4)
<s1>def</s1> move_or_turn():


<s2>if</s2> front_is_clear():


dance()


move()


<s3>else</s3>:


turn_left()


put_beeper()

repeat(move_or_turn, 18)      
turn_off()


beepers button


../../images/intro/btn_beepers.png


Make sure that Reeborg carries enough beepers to do his task!


To give Reeborg some beepers to carry, try clicking on the<br0/>


<i1> beepers button.


Notice how the instructions <t0>dance()</t0> and <t1>move()</t1> are aligned after the <s2>if</s2> statement and indented from it, indicating that they belong in the same <i3>block of instructions</i3>.


The instructions <t4>turn_left()</t4> and <t5>put_beeper()</t5> are similarly aligned, indented from the <s6>else</s6> statement to which they belong.


The result of running the program is indicated below.


around


../../images/intro/around2.png


Now, what happens if we do not align the instruction <t0>put_beeper()</t0> with <t1>turn_left()</t1>, but align it instead with the <s2>else</s2> statement, as indicated below.


<s0>def</s0> dance():


repeat(turn_left, 4)
<s1>def</s1> move_or_turn():


<s2>if</s2> front_is_clear():


dance()


move()


<s3>else</s3>:


turn_left()


put_beeper()

repeat(move_or_turn, 18)      
turn_off()


Now, the definition of <t0>move_or_turn()</t0> includes a choice <s1>if</s1>/<s2>else</s2> resulting in either a dance and a move forward, <b3>or</b3> a left turn, followed every time by the instruction <t4>put_beeper()</t4>.


The result of running this program is indicated below:


around


../../images/intro/around3.png


As you can see, after every step forward, a beeper has been put down.


Each corner now has two beepers: one from the previous move to reach the corner, and one for the left turn after reaching the corner.


Now, suppose we align the <t0>put_beeper()</t0> instruction with the <s1>def</s1> statement as indicated below?


<s0>def</s0> dance():


repeat(turn_left, 4)
<s1>def</s1> move_or_turn():


<s2>if</s2> front_is_clear():


dance()


move()


<s3>else</s3>:


turn_left()
put_beeper()

repeat(move_or_turn, 18)      
turn_off()


Now, <t0>put_beeper()</t0> no longer belongs to the definition as it is not indented to be aligned with other instructions within the definition.


It is a single instruction, the first in fact that Reeborg must follow, before repeating the <t1>move_or_turn()</t1> instruction 18 times.


The result is the following:


around


../../images/intro/around4.png


So, as you can see, much information is given to Reeborg through blank spaces (i.e. the indentation of the instructions within blocks).


Through practice, you will learn to use this to your advantage and realise that Python allows you to write very readable code by indenting instructions.


Jumping hurdles


Reeborg has become quite good at jumping hurdles.


He now enters races of different lengths: short sprints and long races.


He knows that he has reached the finish line when he is next to a beeper.


Below, you will find two such race courses; the world files are hurdles1.wld and hurdles2.wld.


hurdles start


../../images/intro/hurdles1_start.png


hurdles start


../../images/intro/hurdles2_start.png


Assume that there are no races longer than 20 units.


Define an instruction that looks somewhat like the following:


<s0>def</s0> move_jump_or_finish():


<s1>if</s1> on_beeper(): <s2># end of race</s2>


turn_off()


<s3>else</s3>:


<s4>if</s4> front_is_clear(): <s5># not finished, and no hurdle to jump</s5>


move()


<s6>else</s6>:


jump_one_hurdle()


with an appropriate <t0>jump_one_hurdle()</t0> instruction, so that, other than definitions, the only instruction that Reeborg needs to follow is<br1>


<t2>repeat(move_jump_or_finish, 20)</t2>.


Note that, in the above definition, the code is getting more and more indented as we introduce additional tests.


12-if.htm


previous


../../images/previous.png


../lessons_toc.htm


home


../../images/home.png


14-elif.htm


next


../../images/next.png


<a0><i1> If only Reeborg could decide on his own ...</a0> - <a2><i3></a2> - <a4>If, else, if, else, .." type='text/css'>
<title>听我的...或者...</title>
</head>
<body>
<h2 class="title">13. 听我的 ...<span class="pykeyword">或者</span> ...</h2>
<p>当觉得如何变成有趣时，你不应当在电脑面前花费你所有的时间。 <b>如果</b>外面下雨了，那就一直读书，否则，出去玩吧！ （是的，即使是你的祖母！）</p><!--===========================================-->

<hr width="50%">
<h3 class="section">做决定</h3>
<p>让我们来看些以 <b>if</b>开头的句子.</p>
<p><b>If</b>下雨了,<br> ... 一直读书吧,<br> <b>否则</b>,<br> ...出去玩吧！</p>
<p>这一开始看起来像一个小电脑程序。 假设这是个python程序，我们来写写看。</p>
<pre>
<span class="keyword">if</span> it_rains():
    keep_reading()
<span class="keyword">else</span>:
    go_outside_and_play()
</pre>
<p>你刚刚学到了一个新的python关键词, <span class=
"pykeyword">else</span>. 所以，如果外面下雨了，那就读书；否则，你知道该怎么做了！</p><!--======================================-->

<hr width="50%">
<h3 class="section">"我懂了...", 机器人说.</h3>
<p>除了能够发现他自己是否是站在一个或更多beeper的旁边，机器人也可以看到他面前是否有面墙挡住了他的路。 他也可以将头转到他的左边或者右边看那里是否也有一面墙。 你可以用以下的命令来让他看：</p>
<pre>
front_is_clear()  <span class=
"comment">#当前面没有墙时为真，否则为假</span>
left_is_clear()
right_is_clear()
</pre>
<p>我们先用第一个指令来让机器人探索他的世界。 当前面没有墙时，我们用前进的命令使得机器人沿着世界的边界前进，否则就左转。 下面的简单程序是基础：</p>
<pre>
<span class="keyword">if</span> front_is_clear():
    move()
<span class="keyword">else</span>:
    turn_left()
      
turn_off()
</pre>
<p>下面显示了两种不同情况下程序运行的结果。 在尝试时，确保你不要忘记 关键词<span class="pykeyword">else</span>后面的冒号 (<tt>:</tt>) .</p>
<p><img alt="start if" src="../../images/intro/if1start.png"> <img alt=
"lead to" src="../../images/lead_to.png"> <img alt="end if" src=
"../../images/intro/if1end.png"></p>
<p><img alt="start if" src="../../images/intro/if2start.png"> <img alt=
"lead to" src="../../images/lead_to.png"> <img alt="end if" src=
"../../images/intro/if2end.png"></p>
<p>现在，我们来多次重复使用 <i>条件</i> 指令使得机器人环游世界。</p>
<pre>
<span class="keyword">def</span> move_or_turn():
    <span class="keyword">if</span> front_is_clear():
        move()
    <span class="keyword">else</span>:
        turn_left()

repeat(move_or_turn, 20)      
turn_off()
</pre>
<p>现在，在一个小地图上，给出了如下最后的结果：</p>
<p><img alt="around" src="../../images/intro/around1.png"></p>
<p>我们可以使得这更有趣，比如让机器人在前进时“跳舞”，而在转弯时放下一个beeper。 下面的程序可以让机器人实现这个功能：</p>
<pre>
<span class="keyword">def</span> dance():
    repeat(turn_left, 4)
<span class="keyword">def</span> move_or_turn():、
    <span class="keyword">if</span> front_is_clear():
        dance()
        move()
    <span class="keyword">else</span>:
        turn_left()
        put_beeper()

repeat(move_or_turn, 18)      
turn_off()
</pre>
<p>确认机器人携带了足以完成任务的beeper。 试着按<br/> <img alt="beepers button" src="../../images/intro/btn_beepers.png">按钮，可以给机器人一些携带的beeper.</p>

<p>注意指令 <tt>dance()</tt>和<tt>move()</tt> 是排列在 <span class="pykeyword">if</span> 状态后面的，这说明它们是属于同一个 <i>指令结构</i>. 指令 <tt>turn_left()</tt> 和 <tt>put_beeper()</tt> 也是类似地排列, 在 <span class=
"pykeyword">else</span> 状态后面。 运行这个程序的结果如下所示。</p>
<img alt="around" src="../../images/intro/around2.png">
<p>现在，如果我们不是将<tt>put_beeper()</tt>排列在 <tt>turn_left()</tt>同一列,而是把它放在 <span class=
"pykeyword">else</span> 状态的那列，那会发生什么呢？</p>
<pre>
<span class="keyword">def</span> dance():
    repeat(turn_left, 4)
<span class="keyword">def</span> move_or_turn():、
    <span class="keyword">if</span> front_is_clear():
        dance()
        move()
    <span class="keyword">else</span>:
        turn_left()
    put_beeper()

repeat(move_or_turn, 18)      
turn_off()
</pre>
<p>现在，定义 <tt>move_or_turn()</tt>包括一个选择 <span class="pykeyword">if</span>/<span class="pykeyword">else</span>，结果不是跳舞前进， <b>就是</b>一个左转并且执行 <tt>put_beeper()</tt>命令. 程序运行的结果如下所示:</p>
<img alt="around" src="../../images/intro/around3.png">
<p>如你所见到的，每前进一步，就有一个beeper被放下来了。 每个角落都有了两个beeper：一个来自于到达角落前的移动，一个来自于离开角落时左转的动作。</p>
<p>现在，假设我们将 <tt>put_beeper()</tt>命令和 <span class="pykeyword">def</span>状态排列在同一行，如下所示：</p>
<pre>
<span class="keyword">def</span> dance():
    repeat(turn_left, 4)
<span class="keyword">def</span> move_or_turn():、
    <span class="keyword">if</span> front_is_clear():
        dance()
        move()
    <span class="keyword">else</span>:
        turn_left()
put_beeper()

repeat(move_or_turn, 18)      
turn_off()
</pre>
<p>现在，由于 <tt>put_beeper()</tt>已经不再和定义中其它的指令平行排列，它就不再属于这个定义了。 这是一个单独的指令, 是机器人在执行了<tt>move_or_turn()</tt>指令18次以后第一个要执行的指令。 结果如下：</p>
<p><img alt="around" src="../../images/intro/around4.png"></p>
<p>所以，你可以看到，空格（也就是指令前面的空格）也给予了机器人很多信息。 通过练习，你将学习如何最好地使用这个，并且意识到Python能够让你通过内嵌指令写出非常具有可读性的代码。</p>
<hr width="50%">
<h3 class="try">跨栏</h3>
<p>机器人已经变得很擅长跨栏了。 现在，他参加了不同距离的比赛：短杆和长跑。 他明白当他在一个beeper旁边时，他就到了终点线。 在下面，你将发现两个这样的比赛课程； 地图文件是 hurdles1.wld 和 hurdles2.wld.</p>
<p><img alt="跨栏开始了" src="../../images/intro/hurdles1_start.png"></p>
<br>
<p><img alt="跨栏开始了" src="../../images/intro/hurdles2_start.png"></p>
<p>假设没有比20个点更长的比赛。 定义一个差不多如下所示的指令：</p>
<pre>
<span class="keyword">def</span> move_jump_or_finish():
    <span class="keyword">if</span> on_beeper(): <span class=
"comment"># end of race</span>
        turn_off()
    <span class="keyword">else</span>:
        <span class="keyword">if</span> front_is_clear(): <span class=
"comment"># not finished, and no hurdle to jump</span>
            move()
        <span class="keyword">else</span>:
            jump_one_hurdle()
</pre>
<p>通过一个合适的 <tt>jump_one_hurdle()</tt>指令, 于是不同于其它的指令, 机器人唯一要遵循的指令是<br> <tt>repeat(move_jump_or_finish, 20)</tt>.</p>
<p>注意，在上面的定义中，由于我们引入了额外的文本，代码越来越内嵌了。</p>
<center><a href="12-if.htm"><img alt="否则previous" src=
"../../images/previous.png"> If only Reeborg could decide on his own ...</a>
- <a href="../lessons_toc.htm"><img alt="home" src="../../images/home.png"></a> -
<a href="14-elif.htm">If, else, if, else, ....<img alt="next" src=
"../../images/next.png"></a></center>
</body>
</html>
